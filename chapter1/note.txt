내가 느낀 전략 패턴은 아래와 같다

추상 클래스를 상속을 받아서 구현하거나, 인터페이스를 상속 받아서 구현을 할 때 상속을 받고 있는 클래스의 개수가 증가 할 것으로 보이면
사용하기 좋을 것 같다.

꼭 위 조건을 챙길 필요는 없는 것 같다.

상속도 필요한 부분이지만 상속을 해서 하위 클래스들이 각각의 동작을 구현해야 하고 또한 구현 된 기능의 수정이 많을 때 좋은 것 같다.

결국 상속 보다는 구성을하면 "유연하게 동작하고 유지보수하기 좋다"인 것 같다.

해당 패턴을 사용하기 좋은 예로는 생각해봤을 때 다국어 기능을 구현할 때 좋을 것 같다.